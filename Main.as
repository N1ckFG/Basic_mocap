package {	//libraries	import fl.ik.*;	import flash.events.*;	import flash.net.*;	import flash.xml.*;	import flash.display.*;	import flash.filesystem.*;	import flash.utils.*;		import flash.text.*;		public class Main extends MovieClip {		//---   GLOBALS   ---		//*************************		public var switchWrite=false;// read or write XML data to a file.		public var showDots=true;		//*************************		public var readFileName1="mocapData.xml";		public var writeFileName="mocapData.xml";		public var readFilePath = "xml_read/";		public var writeFilePath="/Users/nick/Projects/Development/ActionScript/2011/osceleton_flash/iktest/xml_write/";		public var counter=0;		public var delayNum=192;		public var allFrames=1135;//1135;		public var counterMax=allFrames+delayNum;		public var guideDots = new Array();		public var animCounter1,animCounter2;		public var animCounter1Timer=20;//deadman fist clench		public var animCounter2Timer=4;// lawyer blink		//---   READ XML   -----------------------------------		public var headX = new Array();		public var headY = new Array();		public var r_handX = new Array();		public var r_handY = new Array();		public var l_handX = new Array();		public var l_handY = new Array();		public var torsoX = new Array();		public var torsoY = new Array();		public var xmlLoader1 = new URLLoader();		//---   RECEIVE OSC   ---		//osc globals		var mySocket;		var ipAddress="127.0.0.1";		var portNumber=3000;		/*		//full list		var oscNames = new Array(		"headX", "headY", "neckX", "neckY", "r_collarX", "r_collarY", "r_shoulderX", "r_shoulderY", "r_elbowX", "r_elbowY", "r_wristX", "r_wristY", "r_handX", "r_handY", "r_fingerX", "r_fingerY", "l_collarX", "l_collarY", "l_shoulderX", "l_shoulderY", "l_elbowX", "l_elbowY", "l_wristX", "l_wristY", "l_handX", "l_handY", "l_fingerX", "l_fingerY", "torsoX", "torsoY", "r_hipX", "r_hipY", "r_kneeX", "r_kneeY", "r_ankleX", "r_ankleY", "r_footX", "r_footY", "l_hipX", "l_hipY", "l_kneeX", "l_kneeY", "l_ankleX", "l_ankleY", "l_footX", "l_footY"		);		*/		var oscNames = new Array(		"headX","headY","r_handX","r_handY","l_handX","l_handY","torsoX","torsoY"		);		var oscData=new Array(oscNames.length);				//constructor				public function Main() {			//		//these will always run		xmlLoader1.addEventListener(Event.COMPLETE, parseXML1);		xmlLoader1.load(new URLRequest(readFilePath + readFileName1));				if (switchWrite) {			StageQuality.LOW;			connect();		}						//----------------------------------		//guide dots		if (showDots) {			for (var i=0; i<oscNames.length/2; i++) {// /2 because oscNames has both x and y coords				guideDots[i] = new GuideDot();				addChild(guideDots[i]);			}		}							//------				addEventListener("enterFrame",doStuff);		}		public function parseXML1(event) {			XML.ignoreWhitespace=true;			var keyFrameList=new XML(event.target.data);			for (var i=0; i < keyFrameList.frameData.length(); i++) {				headX[i]=keyFrameList.frameData[i].head.x;				headY[i]=keyFrameList.frameData[i].head.y;				r_handX[i]=keyFrameList.frameData[i].r_hand.x;				r_handY[i]=keyFrameList.frameData[i].r_hand.y;				l_handX[i]=keyFrameList.frameData[i].l_hand.x;				l_handY[i]=keyFrameList.frameData[i].l_hand.y;				torsoX[i]=keyFrameList.frameData[i].head.x;				torsoY[i]=keyFrameList.frameData[i].head.y;			}		}		//---   WRITE XML   -----------------------------------		var myLoader;		var keyFrameList = new XML(<keyFrameList/>);		//var snd = new RecordSound;		//var channel = new SoundChannel();		public function xmlAdd() {			//first			var frameData = <frameData/>;			//--			frameData.appendChild(<frameNum/>);			frameData.frameNum.appendChild(counter-delayNum);			//--;			frameData.appendChild(<head/>);			frameData.head.appendChild(<x/>);			frameData.head.appendChild(<y/>);			frameData.head.x.appendChild(oscData[0]);			frameData.head.y.appendChild(oscData[1]);			frameData.appendChild(<r_hand/>);			frameData.r_hand.appendChild(<x/>);			frameData.r_hand.appendChild(<y/>);			frameData.r_hand.x.appendChild(oscData[2]);			frameData.r_hand.y.appendChild(oscData[3]);			frameData.appendChild(<l_hand/>);			frameData.l_hand.appendChild(<x/>);			frameData.l_hand.appendChild(<y/>);			frameData.l_hand.x.appendChild(oscData[4]);			frameData.l_hand.y.appendChild(oscData[5]);			frameData.appendChild(<torso/>);			frameData.torso.appendChild(<x/>);			frameData.torso.appendChild(<y/>);			frameData.torso.x.appendChild(oscData[6]);			frameData.torso.y.appendChild(oscData[7]);			//--;			//last;			keyFrameList.appendChild(frameData);		}		public function xmlSaveToDisk() {			try{			var saveStr=keyFrameList.toXMLString();			var file = new File(writeFilePath + writeFileName);			var fs = new FileStream();			fs.open(file, FileMode.WRITE);			fs.writeUTFBytes(saveStr);			fs.close();			}			catch(err2:Error){			trace(err2.message);			}			stop();		}		//--set up osc		public function connect() {			mySocket = new XMLSocket();			mySocket.addEventListener(Event.CONNECT, handleConnect);			mySocket.addEventListener(Event.CLOSE, handleClose);			mySocket.addEventListener(DataEvent.DATA, oscEvent);			mySocket.connect(ipAddress, portNumber);		}		public function handleConnect(event) {			trace("XML Socket connected!");			//gotoAndStop(2);		}		public function handleClose(event) {			trace("XML Socket closed!");		}		public function oscEvent(event) {			var XMLData:XMLList=new XMLList(event.data);			for (var i=0; i<oscNames.length; i++) {				if (XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[1]=="head") {					oscData[0]=XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[5];					oscData[1]=XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[7];				}				if (XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[1]=="r_hand") {					oscData[2]=XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[5];					oscData[3]=XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[7];				}				if (XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[1]=="l_hand") {					oscData[4]=XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[5];					oscData[5]=XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[7];				}				if (XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[1]=="torso") {					oscData[6]=XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[5];					oscData[7]=XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()[7];				}			}			//trace(XMLData.MESSAGE.(@NAME=="/joint").ARGUMENT.attributes()); //dumps all attributes!			//trace("l_hand: " + oscData[0] + ", " + oscData[1] + "   r_hand: " + oscData[2] + ", " + oscData[3]);		}	//----------------------		public function doStuff(event) {			var qheadX,qheadY,qr_handX,qr_handY,ql_handX,ql_handY,qtorsoX,qtorsoY;			if (switchWrite) {				qheadX=oscData[0];				qheadY=oscData[1];				qr_handX=oscData[2];				qr_handY=oscData[3];				ql_handX=oscData[4];				ql_handY=oscData[5];				qtorsoX=oscData[6];				qtorsoY=oscData[7];			} else if (!switchWrite) {				qheadX=headX[counter];				qheadY=headY[counter];				qr_handX=r_handX[counter];				qr_handY=r_handY[counter];				ql_handX=l_handX[counter];				ql_handY=l_handY[counter];				qtorsoX=torsoX[counter];				qtorsoY=torsoY[counter];			}			trace(qr_handX + " " + qr_handY);			//draw stuff			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			try{			//animation starts here						}			catch(err1:Error){			trace(err1.message);			}			if (showDots) {				guideDots[0].x=qheadX*stage.stageWidth;				guideDots[0].y=qheadY*stage.stageHeight;				guideDots[1].x=qr_handX*stage.stageWidth;				guideDots[1].y=qr_handY*stage.stageHeight;				guideDots[2].x=ql_handX*stage.stageWidth;				guideDots[2].y=ql_handY*stage.stageHeight;				guideDots[3].x=qtorsoX*stage.stageWidth;				guideDots[3].y=qtorsoY*stage.stageHeight;			}			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			if (counter < counterMax) {				counter++;				if (switchWrite) {					xmlAdd();				}			} else {				if (switchWrite) {					xmlSaveToDisk();				}			}		}		//---   END   ---	}}